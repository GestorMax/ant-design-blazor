@namespace AntDesign
@inherits ColumnBase
@using AntDesign.Core.Helpers
@using AntDesign.TableModels
@typeparam TData

@if (IsPlaceholder)
{
    <td style="padding: 0px; border: 0px; height: 0px;"></td>
}
else if (IsColGroup)
{
    if (Width != null)
    {
        <col style="width: @((CssSizeLength)Width); min-width: @((CssSizeLength)Width);">
    }
    else
    {
        <col />
    }
}
else if (IsHeader && HeaderColSpan != 0)
{
    <th class="@ClassMapper.Class" style="@HeaderStyle" colspan="@HeaderColSpan" @attributes="@(Filters?.Any()==true?null: new Dictionary<string, object>() { ["onclick"]=_callbackFactory.Create(this, HandelHeaderClick )})">
        @FilterToolTipSorter(this)
    </th>
}
else if (!IsHeader && RowSpan != 0 && ColSpan != 0)
{
    <td class="@ClassMapper.Class" style="@Style" rowspan="@RowSpan" colspan="@ColSpan">
        @if (ColIndex == 1 && Table.TreeMode)
        {
            <span class="ant-table-row-indent indent-level-@RowData.Level" style="padding-left: @(RowData.Level* Table.IndentSize)px;"></span>
            @if (RowData.HasChildren)
            {
                <button type="button" @onclick="ToggleTreeNode" class="ant-table-row-expand-icon @(RowData?.Expanded==true?"ant-table-row-expand-icon-expanded":"ant-table-row-expand-icon-collapsed")" aria-label="@(RowData?.Expanded==true?Table.Locale.Collapse:Table.Locale.Expand)"></button>
            }
            else
            {
                <button type="button" class="ant-table-row-expand-icon ant-table-row-expand-icon-spaced" aria-label="@Table.Locale.Expand"></button>
            }
        }
        @if (CellRender != null)
        {
            @CellRender(Field)
        }
        else if (ChildContent != null)
        {
            @ChildContent
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(Format))
            {
                @(Formatter<TData>.Format(Field,Format))
            }
            else
            {
                @Field
            }
        }
    </td>
}

@code
{

    string HeaderTitle => Title ?? DisplayName ?? FieldName;

    readonly RenderFragment<Column<TData>> SortHeader = col =>
    @<div class="ant-table-column-sorters">
        <span>
            @if (col.TitleTemplate != null)@col.TitleTemplate else @col.HeaderTitle
        </span>
        <span class="ant-table-column-sorter ant-table-column-sorter-full">
            <span class="ant-table-column-sorter-inner">
                <Icon Type="caret-up" Class=@($"ant-table-column-sorter-up {(col.SortModel.SortType==SortType.Ascending? "active":"")}") />
                <Icon Type="caret-down" Class=@($"ant-table-column-sorter-down {(col.SortModel.SortType==SortType.Descending? "active":"")}") />
            </span>
        </span>
    </div>;

readonly RenderFragment<Column<TData>> ToolTipSorter = col =>
@<Template>
    @if (col.ShowSorterTooltip)
    {
        <Tooltip Class="ant-table-column-sorters-with-tooltip" Title="@col.SorterTooltip">
            @col.SortHeader(col)
        </Tooltip>
    }
    else
    {
        @col.SortHeader(col)
    }
</Template>;

readonly RenderFragment<Column<TData>> FilterToolTipSorter = col =>
@<Template>
    @if (col.Filters?.Any() == true)
    {
        <div class="ant-table-filter-column">
            <span class="ant-table-filter-column-title" @attributes="@(new Dictionary<string, object>() { ["onclick"]=_callbackFactory.Create(col, col.HandelHeaderClick )})">
                @if (col.Sortable)
                {
                    @col.ToolTipSorter(col)
                }
            </span>
            <Dropdown Trigger="new[] { TriggerType.Click }" Visible="col._filterOpened" Placement="PlacementType.BottomRight">
                <Overlay>
                    <div class="ant-table-filter-dropdown">
                        <Menu AutoCloseDropdown="false">
                            @foreach (var filter in col.Filters)
                            {
                                <MenuItem @attributes="@(new Dictionary<string, object>() { ["OnClick"] = _callbackFactory.Create<bool>(col, value => filter.Selected = value) })">
                                    <Checkbox Value="filter.Selected" @attributes="@(new Dictionary<string, object>() { ["ValueChanged"] = _callbackFactory.Create<bool>(col, value => filter.Selected = value) })">@filter.Text</Checkbox>
                                </MenuItem>
                            }
                        </Menu>
                        <div class="ant-table-filter-dropdown-btns">
                            <Button Size="small" Type="link">@col.Table?.Locale.FilterReset</Button>
                            <Button Size="small" Type="primary" @attributes="@(new Dictionary<string, object>() { ["OnClick"] = _callbackFactory.Create<MouseEventArgs>(col, ()=>col.FilterConfirm()) })">
                                @col.Table?.Locale.FilterConfirm
                            </Button>
                        </div>
                    </div>
                </Overlay>
                <ChildContent>
                    <span class="ant-table-filter-trigger-container @(col._filterOpened?" ant-table-filter-trigger-container-open":"")">
                        <span role="button" tabindex="-1" class="ant-dropdown-trigger ant-table-filter-trigger"
                              @attributes="@(new Dictionary<string, object>() { ["onclick"] = _callbackFactory.Create<MouseEventArgs>(col, () => col._filterOpened = !col._filterOpened )})">
                            <Icon Type="filter" />
                        </span>
                    </span>
                </ChildContent>
            </Dropdown>
        </div>
    }
    else
    {
        @if (col.Sortable)
        {
            @col.ToolTipSorter(col)
        }
        else if (col.TitleTemplate != null)
        {
            @col.TitleTemplate
        }
        else
        {
            @col.HeaderTitle
        }
    }
</Template>;

}